// <auto-generated />
using System;
using Capstone.UniFarm.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.UniFarm.Infrastructure.Migrations
{
    [DbContext(typeof(FTAScript_V1Context))]
    partial class FTAScript_V1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CollectedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FarmHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CollectedId");

                    b.HasIndex("FarmHubId");

                    b.HasIndex("OrderId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.BusinessDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndOfRegister")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegiterDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusinessDate");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.CollectedHub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Collecte__349DA5A778107679")
                        .IsUnique();

                    b.ToTable("CollectedHub");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.FarmHub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "UQ__FarmHub__349DA5A74EF17F52")
                        .IsUnique();

                    b.ToTable("FarmHub");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("FarmHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tag")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FarmHubId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CollectedHubStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpectedReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FarmHubStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StationHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StationStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FarmHubId");

                    b.HasIndex("StationHubId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("FinalUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.PriceSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Margin")
                        .HasColumnType("float");

                    b.Property<double?>("MaxMargin")
                        .HasColumnType("float");

                    b.Property<double?>("MinMargin")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PriceSystem");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FarmHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialTag")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FarmHubId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<double?>("MinOrder")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItem");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMenu");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.SessionMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BusinessDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessDateId");

                    b.HasIndex("MenuId");

                    b.ToTable("SessionMenu");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Station__349DA5A773F32A92")
                        .IsUnique();

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CollectedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollectedId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StationId");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Batch", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.CollectedHub", "Collected")
                        .WithMany("Batches")
                        .HasForeignKey("CollectedId")
                        .IsRequired()
                        .HasConstraintName("FK__Batch__Collected__02FC7413");

                    b.HasOne("Capstone.UniFarm.Domain.Models.FarmHub", "FarmHub")
                        .WithMany("Batches")
                        .HasForeignKey("FarmHubId")
                        .IsRequired()
                        .HasConstraintName("FK__Batch__FarmHubId__03F0984C");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Order", "Order")
                        .WithMany("Batches")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Batch__OrderId__04E4BC85");

                    b.Navigation("Collected");

                    b.Navigation("FarmHub");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.CollectedHub", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", "Account")
                        .WithOne("CollectedHub")
                        .HasForeignKey("Capstone.UniFarm.Domain.Models.CollectedHub", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Collected__Accou__3C69FB99");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.FarmHub", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", "Account")
                        .WithOne("FarmHub")
                        .HasForeignKey("Capstone.UniFarm.Domain.Models.FarmHub", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FarmHub__Account__45F365D3");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Menu", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.FarmHub", "FarmHub")
                        .WithMany("Menus")
                        .HasForeignKey("FarmHubId")
                        .IsRequired()
                        .HasConstraintName("FK__Menu__FarmHubId__71D1E811");

                    b.Navigation("FarmHub");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Order", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__CustomerI__6754599E");

                    b.HasOne("Capstone.UniFarm.Domain.Models.FarmHub", "FarmHub")
                        .WithMany("Orders")
                        .HasForeignKey("FarmHubId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__FarmHubId__66603565");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Station", "StationHub")
                        .WithMany("Orders")
                        .HasForeignKey("StationHubId")
                        .HasConstraintName("FK__Order__StationHu__693CA210");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Transaction", "Transaction")
                        .WithMany("Orders")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK__Order__Transacti__68487DD7");

                    b.Navigation("Customer");

                    b.Navigation("FarmHub");

                    b.Navigation("StationHub");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__6D0D32F4");

                    b.HasOne("Capstone.UniFarm.Domain.Models.ProductItem", "ProductItem")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductItemId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Produ__6E01572D");

                    b.Navigation("Order");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.PriceSystem", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Category", "Category")
                        .WithMany("PriceSystems")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__PriceSyst__Categ__4CA06362");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Product", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__Categor__5165187F");

                    b.HasOne("Capstone.UniFarm.Domain.Models.FarmHub", "FarmHub")
                        .WithMany("Products")
                        .HasForeignKey("FarmHubId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__FarmHub__5070F446");

                    b.Navigation("Category");

                    b.Navigation("FarmHub");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductImage", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductIm__Produ__5535A963");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductItem", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductIt__Produ__59063A47");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductMenu", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Menu", "Menu")
                        .WithMany("ProductMenus")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductMe__MenuI__75A278F5");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Product", "Product")
                        .WithMany("ProductMenus")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductMe__Produ__76969D2E");

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.SessionMenu", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.BusinessDate", "BusinessDate")
                        .WithMany("SessionMenus")
                        .HasForeignKey("BusinessDateId")
                        .IsRequired()
                        .HasConstraintName("FK__SessionMe__Busin__7F2BE32F");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Menu", "Menu")
                        .WithMany("SessionMenus")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK__SessionMe__MenuI__7E37BEF6");

                    b.Navigation("BusinessDate");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Station", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", "Account")
                        .WithOne("Station")
                        .HasForeignKey("Capstone.UniFarm.Domain.Models.Station", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Station__Account__412EB0B6");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Transaction", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Walle__619B8048");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Transfer", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.CollectedHub", "Collected")
                        .WithMany("Transfers")
                        .HasForeignKey("CollectedId")
                        .IsRequired()
                        .HasConstraintName("FK__Transfer__Collec__08B54D69");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Order", "Order")
                        .WithMany("Transfers")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Transfer__OrderI__0A9D95DB");

                    b.HasOne("Capstone.UniFarm.Domain.Models.Station", "Station")
                        .WithMany("Transfers")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("FK__Transfer__Statio__09A971A2");

                    b.Navigation("Collected");

                    b.Navigation("Order");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Wallet", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", "Account")
                        .WithMany("Wallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Wallet__AccountI__5CD6CB2B");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Capstone.UniFarm.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Account", b =>
                {
                    b.Navigation("CollectedHub")
                        .IsRequired();

                    b.Navigation("FarmHub")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Station")
                        .IsRequired();

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.BusinessDate", b =>
                {
                    b.Navigation("SessionMenus");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Category", b =>
                {
                    b.Navigation("PriceSystems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.CollectedHub", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.FarmHub", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Menus");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Menu", b =>
                {
                    b.Navigation("ProductMenus");

                    b.Navigation("SessionMenus");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Order", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("OrderDetails");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductItems");

                    b.Navigation("ProductMenus");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.ProductItem", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Station", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Transaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Capstone.UniFarm.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
